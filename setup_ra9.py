#!/usr/bin/env python3
"""
RA9 Setup Script
Automated setup and configuration for RA9 Cognitive Engine
"""

import os
import sys
import subprocess
import json
from pathlib import Path
import platform

def print_step(step_num, title, description=""):
    """Print formatted setup step"""
    print(f"\n{'='*60}")
    print(f"STEP {step_num}: {title}")
    print(f"{'='*60}")
    if description:
        print(f"{description}\n")

def check_python_version():
    """Check if Python version is compatible"""
    print_step(1, "Checking Python Version")
    
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print(f"❌ Python {version.major}.{version.minor} detected. RA9 requires Python 3.8+")
        print("Please upgrade Python and try again.")
        sys.exit(1)
    
    print(f"✅ Python {version.major}.{version.minor}.{version.micro} - Compatible")

def create_virtual_environment():
    """Create and activate virtual environment"""
    print_step(2, "Setting up Virtual Environment")
    
    venv_path = Path("ra9_env")
    
    if venv_path.exists():
        print("✅ Virtual environment already exists")
        return str(venv_path)
    
    try:
        subprocess.run([sys.executable, "-m", "venv", "ra9_env"], check=True)
        print("✅ Virtual environment created successfully")
        return str(venv_path)
    except subprocess.CalledProcessError as e:
        print(f"❌ Failed to create virtual environment: {e}")
        sys.exit(1)

def get_activation_command():
    """Get the correct activation command for the platform"""
    if platform.system() == "Windows":
        return "ra9_env\\Scripts\\activate"
    else:
        return "source ra9_env/bin/activate"

def install_dependencies():
    """Install RA9 dependencies"""
    print_step(3, "Installing Dependencies")
    
    # Determine pip command based on platform
    if platform.system() == "Windows":
        pip_cmd = "ra9_env\\Scripts\\pip"
    else:
        pip_cmd = "ra9_env/bin/pip"
    
    try:
        # Upgrade pip first
        print("📦 Upgrading pip...")
        subprocess.run([pip_cmd, "install", "--upgrade", "pip"], check=True)
        
        # Install RA9 package
        print("📦 Installing RA9 package...")
        subprocess.run([pip_cmd, "install", "-e", "."], check=True)
        
        # Install development dependencies
        print("📦 Installing development dependencies...")
        subprocess.run([pip_cmd, "install", "-e", ".[dev]"], check=True)
        
        print("✅ All dependencies installed successfully")
        
    except subprocess.CalledProcessError as e:
        print(f"❌ Failed to install dependencies: {e}")
        print("Try running manually:")
        print(f"  {get_activation_command()}")
        print("  pip install -e .")
        sys.exit(1)

def setup_environment_file():
    """Create .env file with required environment variables"""
    print_step(4, "Setting up Environment Configuration")
    
    env_file = Path(".env")
    
    if env_file.exists():
        print("✅ .env file already exists")
        return
    
    # Get API key from user
    print("🔑 RA9 requires a Google Gemini API key for LLM functionality")
    print("You can get one from: https://makersuite.google.com/app/apikey")
    
    api_key = input("Enter your Gemini API key (or press Enter to skip): ").strip()
    
    env_content = f"""# RA9 Environment Configuration
# Generated by setup_ra9.py

# Required: Google Gemini API Key
GEMINI_API_KEY={api_key if api_key else 'your_gemini_api_key_here'}

# Optional: Logging and Debugging
RA9_LOG_LEVEL=INFO
RA9_DEBUG=false

# Optional: Memory and Storage
RA9_MEMORY_PATH=./memory
RA9_MAX_ITERATIONS=5

# Optional: Quality Control
RA9_CRITIC_MAX_ISSUES=0
RA9_COHERENCE_THRESHOLD=0.85
"""
    
    try:
        with open(env_file, "w") as f:
            f.write(env_content)
        print("✅ .env file created successfully")
        
        if not api_key:
            print("⚠️  Remember to add your Gemini API key to .env file before using RA9")
            
    except Exception as e:
        print(f"❌ Failed to create .env file: {e}")
        sys.exit(1)

def create_directories():
    """Create necessary directories"""
    print_step(5, "Creating Required Directories")
    
    directories = [
        "memory",
        "memory/vector_store",
        "logs",
        "tests",
        "examples"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"✅ Created directory: {directory}")

def run_initial_tests():
    """Run basic tests to verify installation"""
    print_step(6, "Running Initial Tests")
    
    # Determine python command based on platform
    if platform.system() == "Windows":
        python_cmd = "ra9_env\\Scripts\\python"
    else:
        python_cmd = "ra9_env/bin/python"
    
    try:
        # Test import
        print("🧪 Testing imports...")
        result = subprocess.run([
            python_cmd, "-c", 
            "import ra9; from ra9.core.schemas import AgentOutput; print('✅ Imports successful')"
        ], capture_output=True, text=True, check=True)
        print(result.stdout)
        
        # Run basic tests
        print("🧪 Running basic tests...")
        result = subprocess.run([
            python_cmd, "-m", "pytest", "tests/test_quality_guards.py", "-v"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("✅ Basic tests passed")
        else:
            print("⚠️  Some tests failed, but installation is complete")
            print("You can run tests later with: pytest")
            
    except subprocess.CalledProcessError as e:
        print(f"⚠️  Test execution failed: {e}")
        print("Installation complete, but you may want to check the setup")

def create_example_scripts():
    """Create example usage scripts"""
    print_step(7, "Creating Example Scripts")
    
    # Basic usage example
    basic_example = """#!/usr/bin/env python3
\"\"\"
RA9 Basic Usage Example
\"\"\"

import json
from ra9.core.cli_workflow_engine import run_cli_workflow

def main():
    # Define a simple query
    query = {
        "jobId": "example-1",
        "text": "What is artificial intelligence?",
        "mode": "deep",
        "loopDepth": 2,
        "allowMemoryWrite": False
    }
    
    print("🤖 Running RA9 with example query...")
    print(f"Query: {query['text']}")
    print("-" * 50)
    
    try:
        result = run_cli_workflow(query)
        
        if "final_answer" in result:
            print("\\n📝 RA9 Response:")
            print(result["final_answer"])
        else:
            print("\\n⚠️  No final answer generated")
            
        # Show quality metrics if available
        if "iteration_trace" in result:
            trace = result["iteration_trace"]
            print(f"\\n📊 Processed {len(trace)} iterations")
            
    except Exception as e:
        print(f"❌ Error running RA9: {e}")

if __name__ == "__main__":
    main()
"""
    
    with open("examples/basic_usage.py", "w") as f:
        f.write(basic_example)
    
    # CLI example
    cli_example = """#!/bin/bash
# RA9 CLI Usage Examples

echo "🤖 RA9 CLI Examples"
echo "==================="

echo ""
echo "1. Simple query:"
echo '{"jobId":"test-1","text":"What is machine learning?","mode":"deep"}' | python ra9/main.py

echo ""
echo "2. Complex query with memory:"
echo '{"jobId":"test-2","text":"Explain quantum computing","mode":"hybrid","loopDepth":3,"allowMemoryWrite":true}' | python ra9/main.py

echo ""
echo "3. Quality summary:"
python -c "from ra9.core.cli_quality_summary import run_quality_summary; print(run_quality_summary())"
"""
    
    with open("examples/cli_examples.sh", "w") as f:
        f.write(cli_example)
    
    # Make shell script executable on Unix systems
    if platform.system() != "Windows":
        os.chmod("examples/cli_examples.sh", 0o755)
    
    print("✅ Example scripts created in examples/ directory")

def print_completion_message():
    """Print setup completion message"""
    print_step(8, "Setup Complete! 🎉")
    
    activation_cmd = get_activation_command()
    
    print("""
✅ RA9 Cognitive Engine is ready to use!

Next Steps:
1. Activate the virtual environment:
   """ + activation_cmd + """

2. Test the installation:
   python examples/basic_usage.py

3. Try the CLI:
   echo '{"jobId":"test","text":"Hello RA9!","mode":"deep"}' | python ra9/main.py

4. Run quality tests:
   pytest

5. Check the documentation:
   - README.md - Complete setup and usage guide
   - examples/ - Usage examples and scripts
   - tests/ - Test suites and quality validation

Important Notes:
- Make sure your GEMINI_API_KEY is set in .env file
- The virtual environment must be activated before using RA9
- Check logs/ directory for debugging information

For help and support:
- GitHub Issues: https://github.com/LevelSUB-zero/rA9-Base/issues
- Documentation: See README.md

Happy coding with RA9! 🧠✨
""")

def main():
    """Main setup function"""
    print("🧠 RA9 Cognitive Engine Setup")
    print("=" * 50)
    print("This script will set up RA9 with all dependencies and configuration")
    print("=" * 50)
    
    try:
        check_python_version()
        create_virtual_environment()
        install_dependencies()
        setup_environment_file()
        create_directories()
        run_initial_tests()
        create_example_scripts()
        print_completion_message()
        
    except KeyboardInterrupt:
        print("\n\n❌ Setup cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n❌ Setup failed with error: {e}")
        print("Please check the error message and try again")
        sys.exit(1)

if __name__ == "__main__":
    main()
